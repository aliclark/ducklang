


Why:`
This file is a collection of various methods to exercise and hash out various ideas in Ducklang.
`



::2020-09::Number::



square of self:
	result self ** 2


cube of self:
	result self ** 3



::2020-09::Function::



selfsame of self:
	result self



::2020-09::Itemizing::



resultFromEach of self with ...input: ["mapping"]:
	items... of self
	result resultFromEach of items with mapping



::2020-09::Items::



resultFromEach of self with ...input: ["mapping"]:
	for each x in self,
		collect resultOf (mapping in x)



::2020-09::Sequences::



use infinity


power of self:
	for each number in infinity,
		collect self ** number


factorial:
	for each n through infinity,
		when n
			is 0:      collect 1
			otherwise: collect n * (factorial (n - 1))


fibonacci:
	Why:`A benefit of using a 'through' sequence versus 'in' itemization is language-provided memory of results
		 which means it does not take extra time to recurse - f(n-1) and f(n-2) is already memorized.`
	for each n through infinity,
		when n
			is 0: collect 0
			is 1: collect 1
			otherwise: collect (fibonacci (n - 1)) + (fibonacci (n - 2))


lucas:
	for each n through infinity,
		when n
			is 0: collect 2
			is 1: collect 1
			otherwise: collect (lucas (n - 1)) + (lucas (n - 2))



::2020-09::Sequences::Even::



use infinity


evenNumbers:
	for each number in infinity,
		collect number * 2



::2020-09::Sequences::Odd::



use evenNumbers


oddNumbers:
	for each number in evenNumbers,
		collect number + 1



::2020-09::Ranges::



use infinity


countingFrom self with numbersLessThan (otherwise default infinity):
	length = numbersLessThan - self
	for each number in infinity, to extent of length,
		collect self + number


numbersLessThan self:
	for each number in infinity, to extent of self,
		collect number


numbersGreaterThan self:
	for each number in countingFrom self,
		collect number + 1


countingTo self:
	for each number in numbersLessThan self,
		collect number + 1



::2020-09::Numbers::



use evenNumbers,
    oddNumbers


evenNumbersLessThan self:
	for each number in evenNumbers, to extent of roundedUp (self / 2),
		collect number


oddNumbersLessThan self:
	for each number in oddNumbers, to extent of roundedDown (self / 2),
		collect number



::2020-09::Aliquot::



use category,
    error


aliquotSum of self:
	when self
		is 1: result 0

		otherwise:
			variable:sum = 1

			squareRoot... of self

			for each number in countingFrom 2 with numbersLessThan: squareRoot, do:
				when remainder of self with divisor: number
					is 0:
						variable:sum =+ number + (self / number)

			when square of roundedDown squareRoot
				is self:
					variable:sum =+ squareRoot

			result variable:sum


aliquotClassification of self:
	when compare self with number: 1
		is 'less':
			result error 'Input must be a positive integer'
		otherwise:
			aliquotSum... of self
			when compare aliquotSum with self
				is 'less':    result 'deficient'
				is 'greater': result 'abundant'
				otherwise:    result 'perfect'



::2020-09::Rocket::



use category,
    errors,
    log,
    harness,
    blaster,
    turbo,
    offset


launchBoosters of self with thrust as level,
                            angle as trajectory (otherwise default 0.0),
                            turboState (otherwise default 'unknown'):
	numbers = [1, 2, 3]

	variable:stage = 0
	variable:cache = resultFromEach of numbers with square

	variable:resultFromEach... of numbers with square

	variable:...{ foo, bar } = variable:cache

	for each x in turbo, do:
		variable:stage =+ 1
		engage turbo with thruster: x

	result boost blaster with { ...{ stage }: variable,
	                            level, trajectory, offset, color } otherwise default 'done'


engageBoosters of self with thrust,
                            angle (otherwise default 0.0),
                            color (otherwise default 'green'):

	checksResult = preCheck blaster with angle, thrust

	add log with info: 'Hi {name}! Your favourite drink is {drink}.'

	state... of turbo with { angle, thrust,
	                         size: usage of self } otherwise default 'poor'

	when state
		is 'good':
			add log with info: 'Turbo is go!'
			result launchBoosters of self with angle, thrust, state

		is 'okay':
			add log with warning: 'Turbo is iffy :/'
			result launchBoosters of self with angle, thrust, state

		otherwise:
			result 'stopped'



::2020-09::Ideas::



testStructuring of self with options: { name, color, speed },
                             ...input: ["mapping"]:

	...["first", ..."rest"] = input

	l1 = [1, 2, 3]
	l2 = [1, 2]

	l4 = [2, 3, 9]
	l3 = [1, l4]

	Why: an example to show list matching is possible with different input length
	...["a", "b"] = l1

	bob:foo:...["a", "innerList": ["b", "c", ..."rest"]] = l3

	variable:resultFromEach... of numbers with square

	variable:...{ foo, bar } = variable:cache

	foo = 1
	bar = 2
	variable:...{ foo, bar }

	for each x in turbo, do:
		variable:stage =+ 1
		engage turbo with thruster: x

	result boost blaster with { ...{ stage }: variable,
	                            thrust, angle, offset, color } otherwise default 'done'


test1 of self with a: { b: { c: ["d" (otherwise default 2), "e": { f (otherwise default 1) }] } }:
	result a


test2 of self with a: [..."bob"]:
	result bob


test3 of self with ...inputs:
	...[entry1, ...entries] = inputs
	...["value1", ..."values"] = inputs
	result values


firstFive self:
	for each number in infinity, to extent of 5,
		collect number


firstFiveDoubled self:
	for each number in firstFive,
		collect number * 2


firstTwoDoubled self:
	for each number in firstFiveDoubled, to extent of 2,
		collect number


printFirstDoubled self:
	for each number in firstTwoDoubled, to extent of 1, do:
		display number


test4 of self with input1: [abc, "def", ..."rest"],
                   input2: { xyz }:
	result values


test5 of self with input1: [...rest]:
	result rest


